cor  =(cormat)[ut],
p = pmat[ut]
)
}
corr_df <- flattenCorrMatrix(corr$r, corr$P)
# ++++++++++++++++++++++++++++
# flattenCorrMatrix
# ++++++++++++++++++++++++++++
# cormat : matrix of the correlation coefficients
# pmat : matrix of the correlation p-values
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
corr_df <- flattenCorrMatrix(corr$r, corr$P)
corr_df$p.adjust <- p.adjust(corr_df$p, method="fdr", n=length(corr_df$p))
write.csv(corr_df,'/Users/EL-CAPITAN-2016/OneDrive - University of Toronto/Caryn PhD/SARC/Sarcoma-Radiomics-2--Multiple-Lesions/corr_adjust.csv')
View(results.combined)
library(MASS)
library(Rlab)
library(survival)
library(survminer)
library(dplyr)
#library(xlsx)
#library(expss)
#library(rstatix)
library(data.table)
library(tidyverse)
## https://github.com/tidyverse/tibble/issues/395
options(crayon.enabled = FALSE)
#library(tidytidbits)
#nolibrary(survivalAnalysis)
library(mlbench)
library(caret)
library(corrplot)
library(mltools)
library(data.table)
#library(ranger)
#library(naniar)
library(ggplot2)
library(ComplexUpset)  # necessary or upset in chunk2 throws an error
#library(UpSetR)
library(cluster)
#library(factoextra)
#library("pheatmap")
library(gplots)
library(Hmisc)
library(MASS)
library(Rlab)
library(survival)
library(survminer)
library(dplyr)
#library(xlsx)
#library(expss)
#library(rstatix)
library(data.table)
library(tidyverse)
## https://github.com/tidyverse/tibble/issues/395
options(crayon.enabled = FALSE)
#library(tidytidbits)
#nolibrary(survivalAnalysis)
library(mlbench)
library(caret)
library(corrplot)
library(mltools)
library(data.table)
#library(ranger)
#library(naniar)
library(ggplot2)
library(ComplexUpset)  # necessary or upset in chunk2 throws an error
#library(UpSetR)
library(cluster)
#library(factoextra)
#library("pheatmap")
library(gplots)
library(Hmisc)
setwd('/Users/EL-CAPITAN-2016/OneDrive - University of Toronto/Caryn PhD/SARC/Sarcoma-Radiomics-2--Multiple-Lesions') # home
#setwd('/Users/caryngeady/Documents/GitHub/Sarcoma-Radiomics-2--Multiple-Lesions') # office
# radiological/mixed response model features
rad <- read.csv(file = 'spreadsheets/radiological_features.csv')
# most other features
raw <- read.csv(file = 'spreadsheets/updatedFeatures.csv')[,2:4886]
raw[["AGE"]] <- ifelse(raw[["AGE"]]>60,1,0)
raw[["LUNGFL"]] <- ifelse(rad[["lungLesionsPerc"]]>0,1,0)
raw[["LIVERFL"]] <- ifelse(rad[["liverLesionsPerc"]]>0,1,0)
raw[["numLesions"]] <- rad[["numLesions"]]
raw[["numOrgans"]] <- rad[["numOrgans"]]
raw[["assess1"]] <- rad[["assess1"]]
raw <- raw[,-c(7)]
raw[,2:6] <- raw[,2:6]=='True'
# survival data
os <- read.csv(file = 'spreadsheets/LMSARC_OS.csv')
pfs <- read.csv(file = 'spreadsheets/LMSARC_PFS.csv')
# create the survival objects for OS and PFS
surv_object_OS <- Surv(time = os$t, event = os$status)
surv_object_PFS <- Surv(time = pfs$t, event = pfs$status)
# ctdna data (include only positivity and percent levels for baseline and cycle 2)
ctdna <- read.csv(file = 'spreadsheets/ctdna.csv')
ctdna[["USUBJID"]] <- paste("SARC_",ctdna[["USUBJID"]],sep="")
ctdna <- ctdna[2:95,c("USUBJID","Pretreatment","X","Pre.cycle.3","X.1")]
colnames(ctdna) <- c("USUBJID","ctdna.BL.perc","ctdna.BL.pos","ctdna.C2.perc","ctdna.C2.pos")
ctdna <- ctdna %>% mutate_all(na_if,"")
# convert to numeric
ctdna$ctdna.BL.perc <- as.numeric(ctdna$ctdna.BL.perc)
ctdna$ctdna.BL.pos <- as.numeric(ctdna$ctdna.BL.pos)
ctdna$ctdna.C2.perc <- as.numeric(ctdna$ctdna.C2.perc)
ctdna$ctdna.C2.pos <- as.numeric(ctdna$ctdna.C2.pos)
# merge ctdna data with all other features into one unified dataframe
raw <- merge(raw,ctdna,by = "USUBJID",all.x = TRUE)
ctDNA_BL <- !is.na(raw[["ctdna.BL.pos"]])
ctDNA_C2 <- !is.na(raw[["ctdna.C2.pos"]])
raw <- add_column(raw, ctDNA_C2, .after = "MRM")
raw <- add_column(raw, ctDNA_BL, .after = "MRM")
raw <- raw[,-c(9)]
# categorical --> factor
raw$PTUMSITE <- as.factor(raw$PTUMSITE)
raw$BESTRESP <- as.factor(raw$BESTRESP)
raw$mmr <- as.factor(raw$mmr)
raw$ryu <- as.factor(raw$ryu)
raw$assess1 <- as.factor(raw$assess1)
# update as necessary if to be included
raw <- one_hot(as.data.table(raw))
raw <- raw[, -c(22,23,24,32,41,47,48)]    # drop empty/CR/NE response categories
names(raw)[names(raw) == 'PTUMSITE_HEAD/NECK'] <- 'PTUMSITE_HN'
raw <- as.data.frame(raw)
# clean-up
rm(ctdna,rad,ctDNA_BL,ctDNA_C2)
View(raw)
setwd('/Users/EL-CAPITAN-2016/OneDrive - University of Toronto/Caryn PhD/SARC/Sarcoma-Radiomics-2--Multiple-Lesions') # home
#setwd('/Users/caryngeady/Documents/GitHub/Sarcoma-Radiomics-2--Multiple-Lesions') # office
# radiological/mixed response model features
rad <- read.csv(file = 'spreadsheets/radiological_features.csv')
# most other features
raw <- read.csv(file = 'spreadsheets/updatedFeatures.csv')[,2:4886]
raw[["AGE"]] <- ifelse(raw[["AGE"]]>60,1,0)
raw[["LUNGFL"]] <- ifelse(rad[["lungLesionsPerc"]]>0,1,0)
raw[["LIVERFL"]] <- ifelse(rad[["liverLesionsPerc"]]>0,1,0)
raw[["numLesions"]] <- rad[["numLesions"]]
raw[["numOrgans"]] <- rad[["numOrgans"]]
raw[["assess1"]] <- rad[["assess1"]]
raw <- raw[,-c(7)]
raw[,2:6] <- raw[,2:6]=='True'
# survival data
os <- read.csv(file = 'spreadsheets/LMSARC_OS.csv')
pfs <- read.csv(file = 'spreadsheets/LMSARC_PFS.csv')
# create the survival objects for OS and PFS
surv_object_OS <- Surv(time = os$t, event = os$status)
surv_object_PFS <- Surv(time = pfs$t, event = pfs$status)
# ctdna data (include only positivity and percent levels for baseline and cycle 2)
ctdna <- read.csv(file = 'spreadsheets/ctdna.csv')
ctdna[["USUBJID"]] <- paste("SARC_",ctdna[["USUBJID"]],sep="")
ctdna <- ctdna[2:95,c("USUBJID","Pretreatment","X","Pre.cycle.3","X.1")]
colnames(ctdna) <- c("USUBJID","ctdna.BL.perc","ctdna.BL.pos","ctdna.C2.perc","ctdna.C2.pos")
ctdna <- ctdna %>% mutate_all(na_if,"")
# convert to numeric
ctdna$ctdna.BL.perc <- as.numeric(ctdna$ctdna.BL.perc)
ctdna$ctdna.BL.pos <- as.numeric(ctdna$ctdna.BL.pos)
ctdna$ctdna.C2.perc <- as.numeric(ctdna$ctdna.C2.perc)
ctdna$ctdna.C2.pos <- as.numeric(ctdna$ctdna.C2.pos)
# merge ctdna data with all other features into one unified dataframe
raw <- merge(raw,ctdna,by = "USUBJID",all.x = TRUE)
ctDNA_BL <- !is.na(raw[["ctdna.BL.pos"]])
ctDNA_C2 <- !is.na(raw[["ctdna.C2.pos"]])
raw <- add_column(raw, ctDNA_C2, .after = "MRM")
raw <- add_column(raw, ctDNA_BL, .after = "MRM")
raw <- raw[,-c(9)]
# categorical --> factor
raw$PTUMSITE <- as.factor(raw$PTUMSITE)
raw$BESTRESP <- as.factor(raw$BESTRESP)
raw$mmr <- as.factor(raw$mmr)
raw$ryu <- as.factor(raw$ryu)
raw$assess1 <- as.factor(raw$assess1)
# update as necessary if to be included
raw <- one_hot(as.data.table(raw))
raw <- raw[, -c(22,23,24,32,41,47,48)]    # drop empty/CR/NE response categories
names(raw)[names(raw) == 'PTUMSITE_HEAD/NECK'] <- 'PTUMSITE_HN'
raw <- as.data.frame(raw)
# clean-up
#rm(ctdna,rad,ctDNA_BL,ctDNA_C2)
View(ctdna)
View(ctdna)
# Load required packages
library(survival)
library(survminer)
# Load required packages
library(survival)
library(survminer)
install.packages("survminer")
# Load required packages
library(survival)
library(survminer)
install.packages("survminer")
# load required packages
library(survival)
library(survminer)
# load the data
surv_dat <- read.csv(file = 'DAPPER_LMS_survival.csv')
# load the data
#surv_dat <- read.csv(file = 'DAPPER_LMS_survival.csv')
features <- read.csv(file = '/Users/EL-CAPITAN-2016/OneDrive - University of Toronto/Caryn PhD/DAPPER--Correlation-and-Survival/reduced-feature-set.csv')
covariates <- colnames(features)
# load required packages
library(survival)
library(survminer)
library(dplyr)
library(xlsx)
# load required packages
library(survival)
library(survminer)
library(dplyr)
library(xlsx)
# load the data
surv_dat <- read.csv(file = '../data/clinical/survival.csv')
# load the data
surv_dat <- read.csv(file = '..data/clinical/survival.csv')
setwd("~/OneDrive - University of Toronto/Caryn PhD/DAPPER--Correlation-and-Survival")
# load the data
surv_dat <- read.csv(file = '..data/clinical/survival.csv')
# load the data
surv_dat <- read.csv(file = 'data/clinical/survival.csv')
features <- read.csv(file = 'data/results/reduced-feature-set.csv')
covariates <- colnames(features)
View(features)
View(features)
length(features)
# load the data
surv_dat <- read.csv(file = 'data/clinical/survival.csv')
features <- read.csv(file = 'data/results/reduced-feature-set.csv')
covariates <- colnames(features)[2:]
# define and apply mean/sd normalization to all features
mu_stdev_scl <- function(x) {(x - mean(x)) / sd(x)}
meansd_features <- as.data.frame(lapply(features[2:length(covariates)], mu_stdev_scl))
View(meansd_features)
View(meansd_features)
# create and apply the univariate models
univ_formulas <- sapply(covariates[2:length(covariates)], function(x) as.formula(paste('surv_object_OS~', x)))
univ_models <- lapply(univ_formulas, function(x){coxph(x, data = meansd_features)})
View(univ_formulas)
# load the data
surv_dat <- read.csv(file = 'data/clinical/survival.csv')
features <- read.csv(file = 'data/results/reduced-feature-set.csv')
covariates <- colnames(features)
# load the data
surv_dat <- read.csv(file = 'data/clinical/survival.csv')
features <- read.csv(file = 'data/results/reduced-feature-set.csv')
covariates <- colnames(features)
covariates <- covariates[-1]
View(features)
# load the data
surv_dat <- read.csv(file = 'data/clinical/survival.csv')
features <- read.csv(file = 'data/results/reduced-feature-set.csv')
features <- features[-1,:]
# load the data
surv_dat <- read.csv(file = 'data/clinical/survival.csv')
features <- read.csv(file = 'data/results/reduced-feature-set.csv')
features <- features[-1]
covariates <- colnames(features)
covariates <- covariates[-1]
View(features)
View(features)
# define and apply mean/sd normalization to all features
mu_stdev_scl <- function(x) {(x - mean(x)) / sd(x)}
meansd_features <- as.data.frame(lapply(features, mu_stdev_scl))
View(meansd_features)
View(meansd_features)
# create the survival objects for OS and PFS
surv_object_OS <- Surv(time = surv_dat$OS_time, event = surv_dat$OS_status)
surv_object_PFS <- Surv(time = surv_dat$PFS_time_RECISTv1, event = surv_dat$PFS_status_RECISTv1)
surv_object_OS
# create and apply the univariate models
univ_formulas <- sapply(covariates, function(x) as.formula(paste('surv_object_OS~', x)))
univ_models <- lapply(univ_formulas, function(x){coxph(x, data = meansd_features)})
# extract the data
univ_results <- lapply(univ_models,
function(x){
x <- summary(x)
p.value<-signif(x$wald["pvalue"], digits=2)
wald.test<-signif(x$wald["test"], digits=2)
beta<-signif(x$coef[1], digits=2);        #coefficient beta
ci <- signif(x$concordance[1], digits=2)  #concordance index
HR <-signif(x$coef[2], digits=2);         #exp(beta)
HR.confint.lower <- signif(x$conf.int[,"lower .95"], 2)
HR.confint.upper <- signif(x$conf.int[,"upper .95"],2)
HR <- paste0(HR, " (",
HR.confint.lower, "-", HR.confint.upper, ")")
res<-c(beta, HR, wald.test, p.value,ci)
names(res)<-c("beta", "HR (95% CI for HR)", "wald.test",
"p.value","C_index")
return(res)
})
res <- t(as.data.frame(univ_results, check.names = FALSE))
as.data.frame(res)
View(res)
View(res)
# create and apply the univariate models
univ_formulas <- sapply(covariates, function(x) as.formula(paste('surv_object_OS~', x)))
univ_models <- lapply(univ_formulas, function(x){coxph(x, data = meansd_features)})
# extract the data
univ_results <- lapply(univ_models,
function(x){
x <- summary(x)
p.value<-signif(x$wald["pvalue"], digits=2)
wald.test<-signif(x$wald["test"], digits=2)
beta<-signif(x$coef[1], digits=2);        #coefficient beta
ci <- signif(x$concordance[1], digits=2)  #concordance index
HR <-signif(x$coef[2], digits=2);         #exp(beta)
HR.confint.lower <- signif(x$conf.int[,"lower .95"], 2)
HR.confint.upper <- signif(x$conf.int[,"upper .95"],2)
HR <- paste0(HR, " (",
HR.confint.lower, "-", HR.confint.upper, ")")
res<-c(beta, HR, wald.test, p.value,ci)
names(res)<-c("beta", "HR (95% CI for HR)", "wald.test",
"p.value","C_index")
return(res)
})
os_results <- t(as.data.frame(univ_results, check.names = FALSE))
as.data.frame(os_results)
# adjust p-values using FDR
os_results$p.adjust <- p.adjust(os_results$p.value, method="fdr", n=length(os_results$p.value))
View(os_results)
is.atomic(os_results)
# create and apply the univariate models
univ_formulas <- sapply(covariates, function(x) as.formula(paste('surv_object_OS~', x)))
univ_models <- lapply(univ_formulas, function(x){coxph(x, data = meansd_features)})
# extract the data
univ_results <- lapply(univ_models,
function(x){
x <- summary(x)
p.value<-signif(x$wald["pvalue"], digits=2)
wald.test<-signif(x$wald["test"], digits=2)
beta<-signif(x$coef[1], digits=2);        #coefficient beta
ci <- signif(x$concordance[1], digits=2)  #concordance index
HR <-signif(x$coef[2], digits=2);         #exp(beta)
HR.confint.lower <- signif(x$conf.int[,"lower .95"], 2)
HR.confint.upper <- signif(x$conf.int[,"upper .95"],2)
HR <- paste0(HR, " (",
HR.confint.lower, "-", HR.confint.upper, ")")
res<-c(beta, HR, wald.test, p.value,ci)
names(res)<-c("beta", "HR (95% CI for HR)", "wald.test",
"p.value","C_index")
return(res)
})
os_results <- t(as.data.frame(univ_results, check.names = FALSE))
as.data.frame(os_results)
# adjust p-values using FDR
os_results[["p.adjust"]] <- p.adjust(os_results[["p.value"]], method="fdr", n=length(os_results[["p.value"]]))
# create and apply the univariate models
univ_formulas <- sapply(covariates, function(x) as.formula(paste('surv_object_OS~', x)))
univ_models <- lapply(univ_formulas, function(x){coxph(x, data = meansd_features)})
# extract the data
univ_results <- lapply(univ_models,
function(x){
x <- summary(x)
p.value<-signif(x$wald["pvalue"], digits=2)
wald.test<-signif(x$wald["test"], digits=2)
beta<-signif(x$coef[1], digits=2);        #coefficient beta
ci <- signif(x$concordance[1], digits=2)  #concordance index
HR <-signif(x$coef[2], digits=2);         #exp(beta)
HR.confint.lower <- signif(x$conf.int[,"lower .95"], 2)
HR.confint.upper <- signif(x$conf.int[,"upper .95"],2)
HR <- paste0(HR, " (",
HR.confint.lower, "-", HR.confint.upper, ")")
res<-c(beta, HR, wald.test, p.value,ci)
names(res)<-c("beta", "HR (95% CI for HR)", "wald.test",
"p.value","C_index")
return(res)
})
os_results <- t(as.data.frame(univ_results, check.names = FALSE))
as.data.frame(os_results)
# adjust p-values using FDR
os_results["p.adjust"] <- p.adjust(os_results["p.value"], method="fdr", n=length(os_results["p.value"]))
# create and apply the univariate models
univ_formulas <- sapply(covariates, function(x) as.formula(paste('surv_object_OS~', x)))
univ_models <- lapply(univ_formulas, function(x){coxph(x, data = meansd_features)})
# extract the data
univ_results <- lapply(univ_models,
function(x){
x <- summary(x)
p.value<-signif(x$wald["pvalue"], digits=2)
wald.test<-signif(x$wald["test"], digits=2)
beta<-signif(x$coef[1], digits=2);        #coefficient beta
ci <- signif(x$concordance[1], digits=2)  #concordance index
HR <-signif(x$coef[2], digits=2);         #exp(beta)
HR.confint.lower <- signif(x$conf.int[,"lower .95"], 2)
HR.confint.upper <- signif(x$conf.int[,"upper .95"],2)
HR <- paste0(HR, " (",
HR.confint.lower, "-", HR.confint.upper, ")")
res<-c(beta, HR, wald.test, p.value,ci)
names(res)<-c("beta", "HR (95% CI for HR)", "wald.test",
"p.value","C_index")
return(res)
})
os_results <- t(as.data.frame(univ_results, check.names = FALSE))
as.data.frame(os_results)
# adjust p-values using FDR
os_results["p.adjust"] <- p.adjust(os_results["p.value"], method="fdr", n=length(os_results["p.value"]))
as.data.frame(os_results)
# create and apply the univariate models
univ_formulas <- sapply(covariates, function(x) as.formula(paste('surv_object_OS~', x)))
univ_models <- lapply(univ_formulas, function(x){coxph(x, data = meansd_features)})
# extract the data
univ_results <- lapply(univ_models,
function(x){
x <- summary(x)
p.value<-signif(x$wald["pvalue"], digits=2)
wald.test<-signif(x$wald["test"], digits=2)
beta<-signif(x$coef[1], digits=2);        #coefficient beta
ci <- signif(x$concordance[1], digits=2)  #concordance index
HR <-signif(x$coef[2], digits=2);         #exp(beta)
HR.confint.lower <- signif(x$conf.int[,"lower .95"], 2)
HR.confint.upper <- signif(x$conf.int[,"upper .95"],2)
HR <- paste0(HR, " (",
HR.confint.lower, "-", HR.confint.upper, ")")
res<-c(beta, HR, wald.test, p.value,ci)
names(res)<-c("beta", "HR (95% CI for HR)", "wald.test",
"p.value","C_index")
return(res)
})
os_results <- t(as.data.frame(univ_results, check.names = FALSE))
as.data.frame(os_results)
# adjust p-values using FDR
#os_results["p.adjust"] <- p.adjust(os_results["p.value"], method="fdr", n=length(os_results["p.value"]))
View(os_results)
View(os_results)
os_results[['p-value']]
os_results[['p.value']]
# create and apply the univariate models
univ_formulas <- sapply(covariates, function(x) as.formula(paste('surv_object_OS~', x)))
univ_models <- lapply(univ_formulas, function(x){coxph(x, data = meansd_features)})
# extract the data
univ_results <- lapply(univ_models,
function(x){
x <- summary(x)
p.value<-signif(x$wald["pvalue"], digits=2)
wald.test<-signif(x$wald["test"], digits=2)
beta<-signif(x$coef[1], digits=2);        #coefficient beta
ci <- signif(x$concordance[1], digits=2)  #concordance index
HR <-signif(x$coef[2], digits=2);         #exp(beta)
HR.confint.lower <- signif(x$conf.int[,"lower .95"], 2)
HR.confint.upper <- signif(x$conf.int[,"upper .95"],2)
HR <- paste0(HR, " (",
HR.confint.lower, "-", HR.confint.upper, ")")
res<-c(beta, HR, wald.test, p.value,ci)
names(res)<-c("beta", "HR (95% CI for HR)", "wald.test",
"p.value","C_index")
return(res)
})
os_results <- t(as.data.frame(univ_results, check.names = FALSE))
test <- as.data.frame(os_results)
# adjust p-values using FDR
#os_results["p.adjust"] <- p.adjust(os_results["p.value"], method="fdr", n=length(os_results["p.value"]))
View(test)
View(test)
# create and apply the univariate models
univ_formulas <- sapply(covariates, function(x) as.formula(paste('surv_object_OS~', x)))
univ_models <- lapply(univ_formulas, function(x){coxph(x, data = meansd_features)})
# extract the data
univ_results <- lapply(univ_models,
function(x){
x <- summary(x)
p.value<-signif(x$wald["pvalue"], digits=2)
wald.test<-signif(x$wald["test"], digits=2)
beta<-signif(x$coef[1], digits=2);        #coefficient beta
ci <- signif(x$concordance[1], digits=2)  #concordance index
HR <-signif(x$coef[2], digits=2);         #exp(beta)
HR.confint.lower <- signif(x$conf.int[,"lower .95"], 2)
HR.confint.upper <- signif(x$conf.int[,"upper .95"],2)
HR <- paste0(HR, " (",
HR.confint.lower, "-", HR.confint.upper, ")")
res<-c(beta, HR, wald.test, p.value,ci)
names(res)<-c("beta", "HR (95% CI for HR)", "wald.test",
"p.value","C_index")
return(res)
})
os_results <- t(as.data.frame(univ_results, check.names = FALSE))
os_results <- as.data.frame(os_results)
# adjust p-values using FDR
os_results$p.adjust <- p.adjust(os_results$p.value, method="fdr", n=length(os_results$p.value))
View(os_results)
View(os_results)
# create and apply the univariate models
univ_formulas <- sapply(covariates, function(x) as.formula(paste('surv_object_PFS~', x)))
univ_models <- lapply(univ_formulas, function(x){coxph(x, data = meansd_features)})
# extract the data
univ_results <- lapply(univ_models,
function(x){
x <- summary(x)
p.value<-signif(x$wald["pvalue"], digits=2)
wald.test<-signif(x$wald["test"], digits=2)
beta<-signif(x$coef[1], digits=2);        #coefficient beta
ci <- signif(x$concordance[1], digits=2)  #concordance index
HR <-signif(x$coef[2], digits=2);         #exp(beta)
HR.confint.lower <- signif(x$conf.int[,"lower .95"], 2)
HR.confint.upper <- signif(x$conf.int[,"upper .95"],2)
HR <- paste0(HR, " (",
HR.confint.lower, "-", HR.confint.upper, ")")
res<-c(beta, HR, wald.test, p.value,ci)
names(res)<-c("beta", "HR (95% CI for HR)", "wald.test",
"p.value","C_index")
return(res)
})
pfs_results <- t(as.data.frame(univ_results, check.names = FALSE))
pfs_results <- as.data.frame(pfs_results)
# adjust p-values using FDR
pfs_results$p.adjust <- p.adjust(pfs_results$p.value, method="fdr", n=length(pfs_results$p.value))
View(pfs_results)
View(pfs_results)
